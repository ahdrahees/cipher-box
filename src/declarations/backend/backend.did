type anon_class_18_1 = 
 service {
   add_password: (Password) -> (Result_4);
   add_totp: (text, text) -> (Result_3);
   app_vetkd_public_key: (vec blob) -> (text);
   cycle_balance: () -> (nat) query;
   delete_password: (PassId) -> (Result_2);
   delete_totp: (TOTPId) -> (Result_2);
   encrypted_symmetric_key_for_caller: (blob) -> (text);
   get_initializer: () -> (text);
   get_passwords: () -> (Result_1);
   get_totps: () -> (Result);
   symmetric_key_verification_key: () -> (text);
   update_password: (QueryPassword) -> (Result_1);
   update_totp: (QueryTOTP) -> (Result);
 };
type TOTPId = nat;
type Result_4 = 
 variant {
   err: text;
   ok: PassId;
 };
type Result_3 = 
 variant {
   err: text;
   ok: TOTPId;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec QueryPassword;
 };
type Result = 
 variant {
   err: text;
   ok: vec QueryTOTP;
 };
type QueryTOTP = 
 record {
   encryptedKey: text;
   encryptedName: text;
   id: nat;
 };
type QueryPassword = 
 record {
   encryptedName: text;
   encryptedPass: text;
   encryptedUrl: text;
   encryptedUsername: text;
   id: nat;
 };
type Password = 
 record {
   encryptedName: text;
   encryptedPass: text;
   encryptedUrl: text;
   encryptedUsername: text;
 };
type PassId = nat;
service : () -> anon_class_18_1
